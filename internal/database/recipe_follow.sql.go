// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipe_follow.sql

package database

import (
	"context"
)

const followRecipe = `-- name: FollowRecipe :one
INSERT INTO recipe_follows (
    id, user_id, recipe_id
) VALUES ($1, $2, $3)
RETURNING id, recipe_id, user_id
`

type FollowRecipeParams struct {
	ID       int32
	UserID   int32
	RecipeID int32
}

func (q *Queries) FollowRecipe(ctx context.Context, arg FollowRecipeParams) (RecipeFollow, error) {
	row := q.db.QueryRow(ctx, followRecipe, arg.ID, arg.UserID, arg.RecipeID)
	var i RecipeFollow
	err := row.Scan(&i.ID, &i.RecipeID, &i.UserID)
	return i, err
}

const getUsersRecipes = `-- name: GetUsersRecipes :many
SELECT id, recipe_id, user_id FROM recipe_follows
WHERE user_id = $1
`

func (q *Queries) GetUsersRecipes(ctx context.Context, userID int32) ([]RecipeFollow, error) {
	rows, err := q.db.Query(ctx, getUsersRecipes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecipeFollow
	for rows.Next() {
		var i RecipeFollow
		if err := rows.Scan(&i.ID, &i.RecipeID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowRecipe = `-- name: UnfollowRecipe :one
DELETE FROM recipe_follows
WHERE user_id = $1 AND recipe_id = $2
RETURNING id, recipe_id, user_id
`

type UnfollowRecipeParams struct {
	UserID   int32
	RecipeID int32
}

func (q *Queries) UnfollowRecipe(ctx context.Context, arg UnfollowRecipeParams) (RecipeFollow, error) {
	row := q.db.QueryRow(ctx, unfollowRecipe, arg.UserID, arg.RecipeID)
	var i RecipeFollow
	err := row.Scan(&i.ID, &i.RecipeID, &i.UserID)
	return i, err
}
