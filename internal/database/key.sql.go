// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key.sql

package database

import (
	"context"
	"database/sql"
)

const createKey = `-- name: CreateKey :one
INSERT INTO keys(
    token, created_at, signing_revoked_at, valid_until, type
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING token, type, created_at, valid_until, signing_revoked_at
`

type CreateKeyParams struct {
	Token            []byte
	CreatedAt        sql.NullTime
	SigningRevokedAt sql.NullTime
	ValidUntil       sql.NullTime
	Type             sql.NullString
}

func (q *Queries) CreateKey(ctx context.Context, arg CreateKeyParams) (Key, error) {
	row := q.db.QueryRowContext(ctx, createKey,
		arg.Token,
		arg.CreatedAt,
		arg.SigningRevokedAt,
		arg.ValidUntil,
		arg.Type,
	)
	var i Key
	err := row.Scan(
		&i.Token,
		&i.Type,
		&i.CreatedAt,
		&i.ValidUntil,
		&i.SigningRevokedAt,
	)
	return i, err
}

const deleteOldestKeyOfType = `-- name: DeleteOldestKeyOfType :one
DELETE FROM keys
WHERE created_at = MIN(created_at)
AND type = $1
RETURNING token, type, created_at, valid_until, signing_revoked_at
`

func (q *Queries) DeleteOldestKeyOfType(ctx context.Context, type_ sql.NullString) (Key, error) {
	row := q.db.QueryRowContext(ctx, deleteOldestKeyOfType, type_)
	var i Key
	err := row.Scan(
		&i.Token,
		&i.Type,
		&i.CreatedAt,
		&i.ValidUntil,
		&i.SigningRevokedAt,
	)
	return i, err
}

const getJWTKey = `-- name: GetJWTKey :many
SELECT token, type, created_at, valid_until, signing_revoked_at FROM keys
WHERE type = "jwt"
`

func (q *Queries) GetJWTKey(ctx context.Context) ([]Key, error) {
	rows, err := q.db.QueryContext(ctx, getJWTKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(
			&i.Token,
			&i.Type,
			&i.CreatedAt,
			&i.ValidUntil,
			&i.SigningRevokedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKeysOfType = `-- name: GetKeysOfType :many
SELECT token, type, created_at, valid_until, signing_revoked_at FROM keys 
WHERE type = $1
LIMIT 2
`

func (q *Queries) GetKeysOfType(ctx context.Context, type_ sql.NullString) ([]Key, error) {
	rows, err := q.db.QueryContext(ctx, getKeysOfType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(
			&i.Token,
			&i.Type,
			&i.CreatedAt,
			&i.ValidUntil,
			&i.SigningRevokedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecureCookieKey = `-- name: GetSecureCookieKey :many
SELECT token, type, created_at, valid_until, signing_revoked_at FROM keys
WHERE type = "secure_cookie"
`

func (q *Queries) GetSecureCookieKey(ctx context.Context) ([]Key, error) {
	rows, err := q.db.QueryContext(ctx, getSecureCookieKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(
			&i.Token,
			&i.Type,
			&i.CreatedAt,
			&i.ValidUntil,
			&i.SigningRevokedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeSigningOfType = `-- name: RevokeSigningOfType :one
UPDATE keys
SET signing_revoked_at = $1
WHERE token = $1 AND type = $2
RETURNING token, type, created_at, valid_until, signing_revoked_at
`

type RevokeSigningOfTypeParams struct {
	SigningRevokedAt sql.NullTime
	Type             sql.NullString
}

func (q *Queries) RevokeSigningOfType(ctx context.Context, arg RevokeSigningOfTypeParams) (Key, error) {
	row := q.db.QueryRowContext(ctx, revokeSigningOfType, arg.SigningRevokedAt, arg.Type)
	var i Key
	err := row.Scan(
		&i.Token,
		&i.Type,
		&i.CreatedAt,
		&i.ValidUntil,
		&i.SigningRevokedAt,
	)
	return i, err
}
