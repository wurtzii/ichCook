// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createSCKey = `-- name: CreateSCKey :one
INSERT INTO sc_keys(
    hash_key, block_key, created_at, signing_revoked_at, valid_until
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING hash_key, block_key, created_at, valid_until, signing_revoked_at
`

type CreateSCKeyParams struct {
	HashKey          []byte
	BlockKey         []byte
	CreatedAt        time.Time
	SigningRevokedAt sql.NullTime
	ValidUntil       time.Time
}

func (q *Queries) CreateSCKey(ctx context.Context, arg CreateSCKeyParams) (ScKey, error) {
	row := q.db.QueryRowContext(ctx, createSCKey,
		arg.HashKey,
		arg.BlockKey,
		arg.CreatedAt,
		arg.SigningRevokedAt,
		arg.ValidUntil,
	)
	var i ScKey
	err := row.Scan(
		&i.HashKey,
		&i.BlockKey,
		&i.CreatedAt,
		&i.ValidUntil,
		&i.SigningRevokedAt,
	)
	return i, err
}

const deleteOldestSCKey = `-- name: DeleteOldestSCKey :one
DELETE FROM sc_keys
WHERE created_at = MIN(created_at)
RETURNING hash_key, block_key, created_at, valid_until, signing_revoked_at
`

func (q *Queries) DeleteOldestSCKey(ctx context.Context) (ScKey, error) {
	row := q.db.QueryRowContext(ctx, deleteOldestSCKey)
	var i ScKey
	err := row.Scan(
		&i.HashKey,
		&i.BlockKey,
		&i.CreatedAt,
		&i.ValidUntil,
		&i.SigningRevokedAt,
	)
	return i, err
}

const getSecureCookieKey = `-- name: GetSecureCookieKey :many
SELECT hash_key, block_key, created_at, valid_until, signing_revoked_at FROM sc_keys
ORDER BY created_at ASC
`

func (q *Queries) GetSecureCookieKey(ctx context.Context) ([]ScKey, error) {
	rows, err := q.db.QueryContext(ctx, getSecureCookieKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScKey
	for rows.Next() {
		var i ScKey
		if err := rows.Scan(
			&i.HashKey,
			&i.BlockKey,
			&i.CreatedAt,
			&i.ValidUntil,
			&i.SigningRevokedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeSCSigning = `-- name: RevokeSCSigning :one
UPDATE sc_keys
SET signing_revoked_at = $1
WHERE token = $1
RETURNING hash_key, block_key, created_at, valid_until, signing_revoked_at
`

func (q *Queries) RevokeSCSigning(ctx context.Context, signingRevokedAt sql.NullTime) (ScKey, error) {
	row := q.db.QueryRowContext(ctx, revokeSCSigning, signingRevokedAt)
	var i ScKey
	err := row.Scan(
		&i.HashKey,
		&i.BlockKey,
		&i.CreatedAt,
		&i.ValidUntil,
		&i.SigningRevokedAt,
	)
	return i, err
}
